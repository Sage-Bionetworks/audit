DROP TABLE AUDIT_FILES;
-- File entities and their containing project
CREATE TABLE AUDIT_FILES AS
SELECT DISTINCT
	NODE.ID AS ID,
    NODE.NAME AS NAME,
    FROM_UNIXTIME(NODE.CREATED_ON / 1000) AS CREATED_ON,
    NODE.CREATED_BY AS CREATED_BY,
    NODE.PROJECT_ID AS PROJECT_ID
FROM 
	JDONODE NODE
WHERE
	NODE.NODE_TYPE = 'file' AND 
    NODE.BENEFACTOR_ID <> 1681355; -- NOT IN TRASH CAN

-- Adds indices
ALTER TABLE AUDIT_FILES ADD INDEX USING HASH (ID);
ALTER TABLE AUDIT_FILES ADD INDEX USING BTREE (CREATED_ON);
ALTER TABLE AUDIT_FILES ADD INDEX USING HASH (CREATED_BY);
ALTER TABLE AUDIT_FILES ADD INDEX USING HASH (PROJECT_ID);

-- Unit tests
SELECT CONCAT(CASE WHEN
    (SELECT COUNT(ID) FROM AUDIT_FILES WHERE PROJECT_ID < 0) = 0
    THEN 'PASSED' ELSE 'FAILED' END,
    ' -- The recursion on parent-id is deep enough.');

SELECT CONCAT(CASE WHEN
    (SELECT COUNT(ID) FROM AUDIT_FILES) > 50000
    THEN 'PASSED' ELSE 'FAILED' END,
    ' -- At least 50,000 files.');

SELECT CONCAT(CASE WHEN
    (SELECT COUNT(ID) FROM AUDIT_FILES WHERE PROJECT_ID = 4489) = 0
    THEN 'PASSED' ELSE 'FAILED' END,
    ' -- No file should have the root as the project.');

SELECT CONCAT(CASE WHEN
    (SELECT COUNT(ID) FROM AUDIT_FILES WHERE PROJECT_ID = 1834618) = 0
    THEN 'PASSED' ELSE 'FAILED' END,
    ' -- 0 files in the project of getting started with the R client');

SELECT CONCAT(CASE WHEN
    (SELECT COUNT(ID) FROM AUDIT_FILES WHERE ID = 'file'70933) = 0
    THEN 'PASSED' ELSE 'FAILED' END,
    ' -- Test the file Controlled Use Example. This is not a public file.');

SELECT CONCAT(CASE WHEN
    (SELECT COUNT(ID) FROM AUDIT_FILES WHERE ID = 1739275) = 0
    THEN 'PASSED' ELSE 'FAILED' END,
    ' -- Test the BCC final leader board file. This is a legacy layer object.');

SELECT CONCAT(CASE WHEN
    (SELECT PROJECT_ID FROM AUDIT_FILES WHERE ID = 2331029) = 1734172
    THEN 'PASSED' ELSE 'FAILED' END,
    ' -- Test a RA Challenge file and its containing project.');
